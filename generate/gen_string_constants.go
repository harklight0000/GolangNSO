///go:build ignore

package main

import (
	"bufio"
	"fmt"
	"github.com/rotisserie/eris"
	"nso/logging"
	"nso/utils"
	"os"
	"os/exec"
	"path"
	"strings"
	"text/template"
)

func main() {
	fileCall := os.Getenv("GOFILE")
	logging.Logger.Info(fileCall)
	flags := utils.ParseFlags(os.Args[1:])
	fmt.Println(flags)
	pkg, ok := flags["pkg"]
	if !ok {
		logging.Logger.Error("pkg not found")
		return
	}

	_type, ok := flags["type"]
	if !ok {
		logging.Logger.Error("type not found")
		return
	}

	var consts []string
	pwd, _ := os.Getwd()
	logging.Logger.Info("Current directory: " + pwd)
	fileCall = path.Join(pwd, fileCall)
	logging.Logger.Info("File call: " + fileCall)
	open, err := os.Open(fileCall)
	if err != nil {
		logging.Logger.Error(eris.ToString(err, true))
		return
	}
	defer open.Close()
	scanner := bufio.NewScanner(open)
	var start = false
	for scanner.Scan() {
		line := scanner.Text()
		if strings.Contains(line, "const (") {
			start = true
			continue
		} else if strings.Contains(line, ")") {
			break
		}
		if start {
			trimmedLine := strings.Split(strings.Trim(strings.Trim(line, " "), "\t"), " ")[0]
			if trimmedLine == "" {
				continue
			}
			consts = append(consts, trimmedLine)
		}
	}
	logging.Logger.Info("Consts: " + strings.Join(consts, "\n"))
	outputFile := fileCall[:len(fileCall)-3] + "_string_gen.go"
	logging.Logger.Info("Output file: " + outputFile)
	outFile, err := os.OpenFile(outputFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
	if err != nil {
		logging.Logger.Error(eris.ToString(err, true))
		return
	}
	defer outFile.Close()

	tmpl := template.Must(
		template.New("").
			Parse(`
// Code generated by gen_string_constants.go. DO NOT EDIT.
// Language: go
package {{.Pkg}}
			func (t {{.Type}}) String() string {
				switch t {
				{{ range  .Constants }}	
				case {{.}}:
				return "{{.}}"{{ end }}
				}
				return ""
			}
		
`),
	)
	err = tmpl.Execute(outFile, map[string]interface{}{
		"Pkg":       pkg,
		"Type":      _type,
		"Constants": consts,
	})
	if err != nil {
		logging.Logger.Error(eris.ToString(err, true))
		return
	}
	formatFile(outFile)
	logging.Logger.Info("Generate string constants successfully")
}

func formatFile(path *os.File) {
	// Run go fmt on the generated file.
	cmd := exec.Command("go", "fmt", path.Name())
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	err := cmd.Run()
	if err != nil {
		panic(err)
	}
}
